--- a/meson.build
+++ b/meson.build
@@ -207,101 +207,6 @@ if not libz_dep.found()
   endif
 endif
 
-#################################
-# Regression tests dependencies #
-#################################
-
-# The situation here is a little bit complicated. For running some of the tests
-# we need the Apache's httpd binary. As we want to know more about its
-# configuration we have to run it and parse the output. But here is the first
-# problem, because on Debian we can't run the binary unless the
-# /etc/apache2/envvars file is sourced, otherwise it ends with failure. The
-# recommended way to communicate with the Apache is the apachectl that passes
-# the arguments to httpd and also sources the envvars file. In the ideal world
-# we could use the apachectl to run the tests as well, but on Fedora any non
-# trivial call to it ends with the following error:
-#     Passing arguments to httpd using apachectl is no longer supported.
-#
-# The summary is that for the configuration parsing we will use the apachectl,
-# but for running the tests we will use the httpd binary.
-apachectl = find_program('apachectl', '/sbin/apachectl', '/usr/sbin/apachectl', required : false)
-# This abomination is a result of https://github.com/mesonbuild/meson/issues/1576
-apache_httpd2 = find_program('httpd2', 'httpd', 'apache2', 'apache',
-             '/sbin/httpd2', '/sbin/httpd', '/sbin/apache2', '/sbin/apache',
-             '/usr/sbin/httpd2', '/usr/sbin/httpd', '/usr/sbin/apache2', '/usr/sbin/apache',
-             required : false)
-have_apache=false
-apache_httpd2_version = ''
-if apache_httpd2.found() and apachectl.found()
-  apache_httpd2_version_raw = run_command(apachectl.path(), '-v', check: false)
-  # It seems that from version 2.4.39 apachectl doesn't take arguments, fallback
-  # to calling apache directly just in case.
-  if apache_httpd2_version_raw.returncode() != 0
-    apache_httpd2_version_raw = run_command(apache_httpd2.path(), '-v', check: false)
-  endif
-  if apache_httpd2_version_raw.returncode() == 0
-    apache_httpd2_version = apache_httpd2_version_raw.stdout().split('\n')[0]
-    apache_httpd2_version = apache_httpd2_version.split('/')[1].split(' ')[0]
-    if apache_httpd2_version.version_compare('>=2.4')
-      have_apache = true
-      cdata.set_quoted('APACHE_HTTPD', apache_httpd2.path())
-    else
-      message('Found ' + apache_httpd2_version + ', but at least 2.4 is needed - ignoring')
-    endif
-  endif
-endif
-
-if have_apache
-  apache_modules_dirs_out = run_command('get_apache_modules_dirs.py', apachectl.path(), check: false)
-  have_apache = (apache_modules_dirs_out.returncode() == 0)
-  # Same as above, using apachectl might fail, try apache directly.
-  if not have_apache
-    apache_modules_dirs_out = run_command('get_apache_modules_dirs.py', apache_httpd2.path(), check: false)
-    have_apache = (apache_modules_dirs_out.returncode() == 0)
-  endif
-  if have_apache
-    apache_modules_dirs = apache_modules_dirs_out.stdout().split(':')
-    message('Apache modules directory: ' + apache_modules_dirs[0])
-    cdata.set('APACHE_MODULE_DIR', apache_modules_dirs[0])
-    message('Apache SSL module directory: ' + apache_modules_dirs[1])
-    cdata.set('APACHE_SSL_MODULE_DIR', apache_modules_dirs[1])
-    message('Apache PHP module file: ' + apache_modules_dirs[2])
-    cdata.set('APACHE_PHP_MODULE_FILE', apache_modules_dirs[2])
-    message('Apache mod_unixd module directory: ' + (apache_modules_dirs[3] != '' ? apache_modules_dirs[3] : '(none)'))
-    cdata.set('IF_HAVE_MOD_UNIXD', apache_modules_dirs[3] != '' ? '' : '#')
-    cdata.set('HAVE_APACHE', have_apache)
-  else
-    message('Failed to locate necessary Apache modules for full test coverage')
-    message('stdout: ' + apache_modules_dirs_out.stdout())
-    message('stderr: ' + apache_modules_dirs_out.stderr())
-  endif
-endif
-
-have_php = false
-have_php_xmlrpc = false
-if have_apache
-  php = find_program('php', required : false)
-  message(cdata.get('APACHE_PHP_MODULE_FILE'))
-  if php.found() and cdata.get('APACHE_PHP_MODULE_FILE') != ''
-    have_php = true
-    php_xmlrpc = run_command(php, '-d', 'extension=xmlrpc', '-r', 'exit(function_exists("xmlrpc_server_create")?0:1);', check: false)
-    if php_xmlrpc.returncode() == 0
-      message('php-xmlrpc found')
-      have_php_xmlrpc = true
-      cdata.set('HAVE_PHP_XMLRPC', '1')
-    else
-      message('php-xmlrpc not found')
-    endif
-  endif
-  cdata.set('IF_HAVE_PHP', have_php ? '' : '#')
-  cdata.set('IF_HAVE_PHP_XMLRPC', have_php_xmlrpc ? '' : ';')
-endif
-
-tests_ready = have_apache and have_php and have_php_xmlrpc
-if not tests_ready
-  warning('Some regression tests will not be compiled due to missing libraries or modules. Please check the logs for more details.')
-endif
-
 ##################
 # GSSAPI support #
 ##################
