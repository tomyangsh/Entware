--- a/src/Cedar/Cedar.h
+++ b/src/Cedar/Cedar.h
@@ -376,7 +376,9 @@
 #define	CLIENT_AUTHTYPE_PLAIN_PASSWORD	2			// Plain password authentication
 #define	CLIENT_AUTHTYPE_CERT			3			// Certificate authentication
 #define	CLIENT_AUTHTYPE_SECURE			4			// Secure device authentication
+#ifndef OPENSSL_NO_ENGINE
 #define	CLIENT_AUTHTYPE_OPENSSLENGINE			5			// Openssl engine authentication
+#endif /* OPENSSL_NO_ENGINE */
 
 
 
--- a/src/Cedar/Client.c
+++ b/src/Cedar/Client.c
@@ -4432,6 +4432,7 @@ void InRpcClientAuth(CLIENT_AUTH *c, PAC
 		PackGetStr(p, "SecurePrivateKeyName", c->SecurePrivateKeyName, sizeof(c->SecurePrivateKeyName));
 		break;
 
+#ifndef OPENSSL_NO_ENGINE
   case CLIENT_AUTHTYPE_OPENSSLENGINE:
 		b = PackGetBuf(p, "ClientX");
 		if (b != NULL)
@@ -4442,6 +4443,7 @@ void InRpcClientAuth(CLIENT_AUTH *c, PAC
     PackGetStr(p, "OpensslEnginePrivateKeyName", c->OpensslEnginePrivateKeyName, sizeof(c->OpensslEnginePrivateKeyName));
     PackGetStr(p, "OpensslEngineName", c->OpensslEngineName, sizeof(c->OpensslEngineName));
     break;
+#endif /* OPENSSL_NO_ENGINE */
 	}
 }
 void OutRpcClientAuth(PACK *p, CLIENT_AUTH *c)
@@ -4489,6 +4491,7 @@ void OutRpcClientAuth(PACK *p, CLIENT_AU
 		PackAddStr(p, "SecurePrivateKeyName", c->SecurePrivateKeyName);
 		break;
 
+#ifndef OPENSSL_NO_ENGINE
 	case CLIENT_AUTHTYPE_OPENSSLENGINE:
 		b = XToBuf(c->ClientX, false);
 		if (b != NULL)
@@ -4499,6 +4502,7 @@ void OutRpcClientAuth(PACK *p, CLIENT_AU
 		PackAddStr(p, "OpensslEnginePrivateKeyName", c->OpensslEnginePrivateKeyName);
 		PackAddStr(p, "OpensslEngineName", c->OpensslEngineName);
 		break;
+#endif /* OPENSSL_NO_ENGINE */
 	}
 }
 
@@ -6447,11 +6451,13 @@ bool CtConnect(CLIENT *c, RPC_CLIENT_CON
 						// Register a procedure for secure device authentication
 						r->ClientAuth->SecureSignProc = CiSecureSignProc;
 					}
+#ifndef OPENSSL_NO_ENGINE
           else if (r->ClientAuth->AuthType == CLIENT_AUTHTYPE_OPENSSLENGINE)
 					{
               /* r->ClientAuth->ClientK = OpensslEngineToK("asdf"); */
 						r->ClientAuth->SecureSignProc = NULL;
 					}
+#endif /* OPENSSL_NO_ENGINE */
 					else
 					{
 						r->ClientAuth->SecureSignProc = NULL;
@@ -9207,6 +9213,7 @@ CLIENT_AUTH *CiLoadClientAuth(FOLDER *f)
 		CfgGetStr(f, "SecurePrivateKeyName", a->SecurePrivateKeyName, sizeof(a->SecurePrivateKeyName));
 		break;
 
+#ifndef OPENSSL_NO_ENGINE
 	case CLIENT_AUTHTYPE_OPENSSLENGINE:
 		b = CfgGetBuf(f, "ClientCert");
 		if (b != NULL)
@@ -9220,6 +9227,7 @@ CLIENT_AUTH *CiLoadClientAuth(FOLDER *f)
     }
     CfgGetStr(f, "OpensslEngineName", a->OpensslEngineName, sizeof(a->OpensslEngineName));
 		break;
+#endif /* OPENSSL_NO_ENGINE */
 	}
 
 	return a;
@@ -9760,6 +9768,7 @@ void CiWriteClientAuth(FOLDER *f, CLIENT
 		CfgAddStr(f, "SecurePrivateKeyName", a->SecurePrivateKeyName);
 		break;
 
+#ifndef OPENSSL_NO_ENGINE
 	case CLIENT_AUTHTYPE_OPENSSLENGINE:
 		if (a->ClientX != NULL) {
 			b = XToBuf(a->ClientX, false);
@@ -9769,6 +9778,7 @@ void CiWriteClientAuth(FOLDER *f, CLIENT
 		CfgAddStr(f, "OpensslEnginePrivateKeyName", a->OpensslEnginePrivateKeyName);
 		CfgAddStr(f, "OpensslEngineName", a->OpensslEngineName);
 	break;
+#endif /* OPENSSL_NO_ENGINE */
 	}
 }
 
--- a/src/Cedar/Command.c
+++ b/src/Cedar/Command.c
@@ -2992,7 +2992,9 @@ void PcMain(PC *pc)
 			{"AccountStatusShow", PcAccountStatusShow},
 			{"AccountStatusHide", PcAccountStatusHide},
 			{"AccountSecureCertSet", PcAccountSecureCertSet},
+#ifndef OPENSSL_NO_ENGINE
 			{"AccountOpensslEngineCertSet", PcAccountOpensslEngineCertSet},
+#endif /* OPENSSL_NO_ENGINE */
 			{"AccountRetrySet", PcAccountRetrySet},
 			{"AccountStartupSet", PcAccountStartupSet},
 			{"AccountStartupRemove", PcAccountStartupRemove},
@@ -4766,7 +4768,11 @@ UINT PcAccountCertGet(CONSOLE *c, char *
 
 	if (ret == ERR_NO_ERROR)
 	{
+#ifndef OPENSSL_NO_ENGINE
 		if (t.ClientAuth->AuthType != CLIENT_AUTHTYPE_CERT && t.ClientAuth->AuthType != CLIENT_AUTHTYPE_OPENSSLENGINE)
+#else
+		if (t.ClientAuth->AuthType != CLIENT_AUTHTYPE_CERT)
+#endif /* OPENSSL_NO_ENGINE */
 		{
 			c->Write(c, _UU("CMD_CascadeCertSet_Not_Auth_Cert"));
 			ret = ERR_INTERNAL_ERROR;
@@ -6465,6 +6471,7 @@ UINT PcAccountSecureCertSet(CONSOLE *c,
 	return ret;
 }
 
+#ifndef OPENSSL_NO_ENGINE
 UINT PcAccountOpensslEngineCertSet(CONSOLE *c, char *cmd_name, wchar_t *str, void *param)
 {
 	LIST *o;
@@ -6533,6 +6540,7 @@ UINT PcAccountOpensslEngineCertSet(CONSO
 
 	return ret;
 }
+#endif /* OPENSSL_NO_ENGINE */
 
 
 // Set the retry interval and number of retries when disconnect or connection failure of connection settings
--- a/src/Cedar/Command.h
+++ b/src/Cedar/Command.h
@@ -374,7 +374,9 @@ UINT PcAccountNicSet(CONSOLE *c, char *c
 UINT PcAccountStatusShow(CONSOLE *c, char *cmd_name, wchar_t *str, void *param);
 UINT PcAccountStatusHide(CONSOLE *c, char *cmd_name, wchar_t *str, void *param);
 UINT PcAccountSecureCertSet(CONSOLE *c, char *cmd_name, wchar_t *str, void *param);
+#ifndef OPENSSL_NO_ENGINE
 UINT PcAccountOpensslEngineCertSet(CONSOLE *c, char *cmd_name, wchar_t *str, void *param);
+#endif /* OPENSSL_NO_ENGINE */
 UINT PcAccountRetrySet(CONSOLE *c, char *cmd_name, wchar_t *str, void *param);
 UINT PcAccountStartupSet(CONSOLE *c, char *cmd_name, wchar_t *str, void *param);
 UINT PcAccountStartupRemove(CONSOLE *c, char *cmd_name, wchar_t *str, void *param);
--- a/src/Cedar/Connection.c
+++ b/src/Cedar/Connection.c
@@ -565,6 +565,7 @@ CLIENT_AUTH *CopyClientAuth(CLIENT_AUTH
 		StrCpy(ret->SecurePrivateKeyName, sizeof(ret->SecurePrivateKeyName), a->SecurePrivateKeyName);
 		break;
 
+#ifndef OPENSSL_NO_ENGINE
 	case CLIENT_AUTHTYPE_OPENSSLENGINE:
 		// Secure device authentication
 		ret->ClientX = CloneX(a->ClientX);
@@ -572,6 +573,7 @@ CLIENT_AUTH *CopyClientAuth(CLIENT_AUTH
 		StrCpy(ret->OpensslEngineName, sizeof(ret->OpensslEngineName), a->OpensslEngineName);
     ret->ClientK = OpensslEngineToK(ret->OpensslEnginePrivateKeyName, ret->OpensslEngineName);
 		break;
+#endif /* OPENSSL_NO_ENGINE */
 	}
 
 	return ret;
--- a/src/Cedar/Connection.h
+++ b/src/Cedar/Connection.h
@@ -104,8 +104,10 @@ struct CLIENT_AUTH
 	K *ClientK;										// Client private key
 	char SecurePublicCertName[MAX_SECURE_DEVICE_FILE_LEN + 1];	// Secure device certificate name
 	char SecurePrivateKeyName[MAX_SECURE_DEVICE_FILE_LEN + 1];	// Secure device secret key name
+#ifndef OPENSSL_NO_ENGINE
 	char OpensslEnginePrivateKeyName[MAX_SECURE_DEVICE_FILE_LEN + 1];	// Secure device secret key name
 	char OpensslEngineName[MAX_SECURE_DEVICE_FILE_LEN + 1];	// Secure device secret key name
+#endif /* OPENSSL_NO_ENGINE */
 	CHECK_CERT_PROC *CheckCertProc;					// Server certificate confirmation procedure
 	SECURE_SIGN_PROC *SecureSignProc;				// Security signing procedure
 };
--- a/src/Cedar/Link.c
+++ b/src/Cedar/Link.c
@@ -635,8 +635,13 @@ LINK *NewLink(CEDAR *cedar, HUB *hub, CL
 	}
 
 	// Limitation of authentication method
+#ifndef OPENSSL_NO_ENGINE
 	if (auth->AuthType != CLIENT_AUTHTYPE_ANONYMOUS && auth->AuthType != CLIENT_AUTHTYPE_PASSWORD &&
 		auth->AuthType != CLIENT_AUTHTYPE_PLAIN_PASSWORD && auth->AuthType != CLIENT_AUTHTYPE_CERT && auth->AuthType != CLIENT_AUTHTYPE_OPENSSLENGINE)
+#else
+	if (auth->AuthType != CLIENT_AUTHTYPE_ANONYMOUS && auth->AuthType != CLIENT_AUTHTYPE_PASSWORD &&
+		auth->AuthType != CLIENT_AUTHTYPE_PLAIN_PASSWORD && auth->AuthType != CLIENT_AUTHTYPE_CERT)
+#endif /* OPENSSL_NO_ENGINE */
 	{
 		// Authentication method other than anonymous authentication, password authentication, plain password, certificate authentication cannot be used
 		return NULL;
--- a/src/Cedar/Protocol.c
+++ b/src/Cedar/Protocol.c
@@ -5581,6 +5581,7 @@ bool ClientUploadAuth(CONNECTION *c)
 			}
 			break;
 
+#ifndef OPENSSL_NO_ENGINE
 		case CLIENT_AUTHTYPE_OPENSSLENGINE:
 			// Certificate authentication
 			if (a->ClientX != NULL && a->ClientX->is_compatible_bit &&
@@ -5593,6 +5594,7 @@ bool ClientUploadAuth(CONNECTION *c)
 				}
 			}
 			break;
+#endif /* OPENSSL_NO_ENGINE */
 
 
 		case CLIENT_AUTHTYPE_SECURE:
--- a/src/Cedar/Session.c
+++ b/src/Cedar/Session.c
@@ -1951,6 +1951,7 @@ SESSION *NewClientSessionEx(CEDAR *cedar
 	}
   if (s->ClientAuth->ClientK != NULL)
   {
+#ifndef OPENSSL_NO_ENGINE
     if (s->ClientAuth->AuthType != CLIENT_AUTHTYPE_OPENSSLENGINE)
     {
       s->ClientAuth->ClientK = CloneK(s->ClientAuth->ClientK);
@@ -1959,6 +1960,11 @@ SESSION *NewClientSessionEx(CEDAR *cedar
     {
       s->ClientAuth->ClientK = OpensslEngineToK(s->ClientAuth->OpensslEnginePrivateKeyName, s->ClientAuth->OpensslEngineName);
     }
+#else
+    {
+      s->ClientAuth->ClientK = CloneK(s->ClientAuth->ClientK);
+    }
+#endif /* OPENSSL_NO_ENGINE */
   }
 
 	if (StrCmpi(s->ClientOption->DeviceName, LINK_DEVICE_NAME) == 0)
--- a/src/Mayaqua/Encrypt.c
+++ b/src/Mayaqua/Encrypt.c
@@ -20,7 +20,9 @@
 #include <openssl/ssl.h>
 #include <openssl/err.h>
 #include <openssl/rand.h>
+#ifndef OPENSSL_NO_ENGINE
 #include <openssl/engine.h>
+#endif /* OPENSSL_NO_ENGINE */
 #include <openssl/bio.h>
 #include <openssl/x509.h>
 #include <openssl/pkcs7.h>
@@ -3126,6 +3128,7 @@ bool IsEncryptedK(BUF *b, bool private_k
 	return true;
 }
 
+#ifndef OPENSSL_NO_ENGINE
 K *OpensslEngineToK(char *key_file_name, char *engine_name)
 {
 #ifndef OPENSSL_NO_ENGINE
@@ -3145,6 +3148,7 @@ K *OpensslEngineToK(char *key_file_name,
     return NULL;
 #endif
 }
+#endif /* OPENSSL_NO_ENGINE */
 
 // Convert the BUF to a K
 K *BufToK(BUF *b, bool private_key, bool text, char *password)
--- a/src/Mayaqua/Encrypt.h
+++ b/src/Mayaqua/Encrypt.h
@@ -304,7 +304,9 @@ K *BioToK(BIO *bio, bool private_key, bo
 int PKeyPasswordCallbackFunction(char *buf, int bufsize, int verify, void *param);
 void FreePKey(EVP_PKEY *pkey);
 void FreeK(K *k);
+#ifndef OPENSSL_NO_ENGINE
 K *OpensslEngineToK(char *key_file_name, char *engine_name);
+#endif /* OPENSSL_NO_ENGINE */
 K *BufToK(BUF *b, bool private_key, bool text, char *password);
 bool IsEncryptedK(BUF *b, bool private_key);
 bool IsBase64(BUF *b);
