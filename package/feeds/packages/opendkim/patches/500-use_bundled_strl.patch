From 5777a7c7e28798b114743ff9329e02e271fbf816 Mon Sep 17 00:00:00 2001
From: Tomas Korbar <tkorbar@redhat.com>
Date: Thu, 7 Nov 2019 08:39:08 +0100
Subject: [PATCH] Add implementations of strlcpy and strlcat to opendkim

Implementations were taken from libbsd to maintain compatibility.

List of changes and their justification:

configure
- rebuild configure script because of changes in configure.ac

configure.ac
- added subdir-objects to automake options because linux_string folder
is used in multiple makefiles and is in subdirectory (some warnings are
displayed without it)
- Removed check for getgroups function because
1. it is no longer used in any source file
2. in my opinion bug in autoconf was forcing configure script to link
libbsd to get getgroups function even if it is included in glibc
- added template, argument and automake conditional for --use-bundled-strl
argument. It was neccessary to change structure of some conditionals
because of this change.

libopendkim/Makefile.am
- added automake conditionals for USE_BUNDLED_STRL

opendkim/Makefile.am
- added automake conditionals for USE_BUNDLED_STRL

*.c files
- added build time conditionals for USE_BUNDLED_STRL macro
---
 configure.ac                  |  129 +-
 libopendkim/Makefile.am       |    3 +
 libopendkim/dkim-cache.c      |    5 +
 libopendkim/dkim-canon.c      |    5 +
 libopendkim/dkim-keys.c       |    5 +
 libopendkim/dkim-test.c       |    5 +
 libopendkim/dkim.c            |    5 +
 libopendkim/tests/t-test122.c |    5 +
 libopendkim/tests/t-test123.c |    5 +
 libopendkim/tests/t-test127.c |    5 +
 libopendkim/tests/t-test131.c |    5 +
 libopendkim/tests/t-test136.c |    5 +
 libopendkim/tests/t-test142.c |    5 +
 libopendkim/tests/t-test153.c |    5 +
 libopendkim/tests/t-test42.c  |    5 +
 libopendkim/tests/t-test55.c  |    5 +
 libopendkim/tests/t-test56.c  |    5 +
 libopendkim/tests/t-test57.c  |    5 +
 libopendkim/tests/t-test73.c  |    5 +
 libopendkim/tests/t-test84.c  |    5 +
 libopendkim/tests/t-test88.c  |    5 +
 libopendkim/util.c            |    5 +
 linux_string/linux_string.h   |    7 +
 linux_string/strlcat.c        |   56 +
 linux_string/strlcpy.c        |   51 +
 miltertest/miltertest.c       |    5 +
 opendkim/Makefile.am          |   12 +
 opendkim/config.c             |    5 +
 opendkim/flowrate.c           |    5 +
 opendkim/opendkim-ar.c        |    5 +
 opendkim/opendkim-db.c        |    5 +
 opendkim/opendkim-spam.c      |    5 +
 opendkim/opendkim-testkey.c   |    5 +
 opendkim/opendkim.c           |    5 +
 opendkim/reputation.c         |    5 +
 opendkim/stats.c              |    5 +
 opendkim/test.c               |    5 +
 opendkim/util.c               |    5 +
 stats/opendkim-importstats.c  |    5 +
 40 files changed, 2078 insertions(+), 1447 deletions(-)
 create mode 100644 linux_string/linux_string.h
 create mode 100644 linux_string/strlcat.c
 create mode 100644 linux_string/strlcpy.c


--- a/libopendkim/Makefile.am
+++ b/libopendkim/Makefile.am
@@ -9,6 +9,9 @@ LDADD = ./libopendkim.la
 
 lib_LTLIBRARIES = libopendkim.la
 libopendkim_la_SOURCES = base32.c base64.c dkim-atps.c dkim-cache.c dkim-canon.c dkim-dns.c dkim-keys.c dkim-mailparse.c dkim-report.c dkim-tables.c dkim-test.c dkim-util.c dkim.c util.c base64.h dkim-cache.h dkim-canon.h dkim-dns.h dkim-internal.h dkim-keys.h dkim-mailparse.h dkim-report.h dkim-tables.h dkim-test.h dkim-types.h dkim-util.h dkim.h util.h
+if USE_BUNDLED_STRL
+libopendkim_la_SOURCES += ../linux_string/linux_string.h ../linux_string/strlcpy.c ../linux_string/strlcat.c
+endif
 libopendkim_la_CPPFLAGS = $(LIBCRYPTO_CPPFLAGS)
 libopendkim_la_CFLAGS = $(LIBCRYPTO_INCDIRS) $(LIBOPENDKIM_INC) $(COV_CFLAGS)
 libopendkim_la_LDFLAGS = -no-undefined  $(LIBCRYPTO_LIBDIRS) $(COV_LDFLAGS) -version-info $(LIBOPENDKIM_VERSION_INFO)
--- a/libopendkim/dkim-cache.c
+++ b/libopendkim/dkim-cache.c
@@ -34,6 +34,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/dkim-canon.c
+++ b/libopendkim/dkim-canon.c
@@ -50,6 +50,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/dkim-keys.c
+++ b/libopendkim/dkim-keys.c
@@ -34,6 +34,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/dkim-test.c
+++ b/libopendkim/dkim-test.c
@@ -41,6 +41,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/dkim.c
+++ b/libopendkim/dkim.c
@@ -96,6 +96,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test122.c
+++ b/libopendkim/tests/t-test122.c
@@ -27,6 +27,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test123.c
+++ b/libopendkim/tests/t-test123.c
@@ -27,6 +27,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test127.c
+++ b/libopendkim/tests/t-test127.c
@@ -27,6 +27,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test131.c
+++ b/libopendkim/tests/t-test131.c
@@ -28,6 +28,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test136.c
+++ b/libopendkim/tests/t-test136.c
@@ -27,6 +27,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test142.c
+++ b/libopendkim/tests/t-test142.c
@@ -27,6 +27,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test153.c
+++ b/libopendkim/tests/t-test153.c
@@ -23,6 +23,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test42.c
+++ b/libopendkim/tests/t-test42.c
@@ -31,6 +31,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test55.c
+++ b/libopendkim/tests/t-test55.c
@@ -27,6 +27,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test56.c
+++ b/libopendkim/tests/t-test56.c
@@ -27,6 +27,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test57.c
+++ b/libopendkim/tests/t-test57.c
@@ -29,6 +29,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test73.c
+++ b/libopendkim/tests/t-test73.c
@@ -32,6 +32,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test84.c
+++ b/libopendkim/tests/t-test84.c
@@ -31,6 +31,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/tests/t-test88.c
+++ b/libopendkim/tests/t-test88.c
@@ -27,6 +27,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/libopendkim/util.c
+++ b/libopendkim/util.c
@@ -32,6 +32,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- /dev/null
+++ b/linux_string/linux_string.h
@@ -0,0 +1,7 @@
+#include <stddef.h>
+
+#ifndef LINUX_STRING
+#define LINUX_STRING 1
+size_t strlcat(char *dst, const char *src, size_t dsize);
+size_t strlcpy(char *dst, const char *src, size_t dsize);
+#endif
--- /dev/null
+++ b/linux_string/strlcat.c
@@ -0,0 +1,56 @@
+/*	$OpenBSD: strlcat.c,v 1.15 2015/03/02 21:41:08 millert Exp $	*/
+
+/*
+ * Copyright (c) 1998, 2015 Todd C. Miller <Todd.Miller@courtesan.com>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include <sys/types.h>
+#include <string.h>
+#include "linux_string.h"
+
+/*
+ * Appends src to string dst of size dsize (unlike strncat, dsize is the
+ * full size of dst, not space left).  At most dsize-1 characters
+ * will be copied.  Always NUL terminates (unless dsize <= strlen(dst)).
+ * Returns strlen(src) + MIN(dsize, strlen(initial dst)).
+ * If retval >= dsize, truncation occurred.
+ */
+size_t
+strlcat(char *dst, const char *src, size_t dsize)
+{
+	const char *odst = dst;
+	const char *osrc = src;
+	size_t n = dsize;
+	size_t dlen;
+
+	/* Find the end of dst and adjust bytes left but don't go past end. */
+	while (n-- != 0 && *dst != '\0')
+		dst++;
+	dlen = dst - odst;
+	n = dsize - dlen;
+
+	if (n-- == 0)
+		return(dlen + strlen(src));
+	while (*src != '\0') {
+		if (n != 0) {
+			*dst++ = *src;
+			n--;
+		}
+		src++;
+	}
+	*dst = '\0';
+
+	return(dlen + (src - osrc));	/* count does not include NUL */
+}
--- /dev/null
+++ b/linux_string/strlcpy.c
@@ -0,0 +1,51 @@
+/*	$OpenBSD: strlcpy.c,v 1.12 2015/01/15 03:54:12 millert Exp $	*/
+
+/*
+ * Copyright (c) 1998, 2015 Todd C. Miller <Todd.Miller@courtesan.com>
+ *
+ * Permission to use, copy, modify, and distribute this software for any
+ * purpose with or without fee is hereby granted, provided that the above
+ * copyright notice and this permission notice appear in all copies.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
+ * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
+ * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
+ * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+ * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+ * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
+ * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+ */
+
+#include <sys/types.h>
+#include <string.h>
+#include "linux_string.h"
+
+/*
+ * Copy string src to buffer dst of size dsize.  At most dsize-1
+ * chars will be copied.  Always NUL terminates (unless dsize == 0).
+ * Returns strlen(src); if retval >= dsize, truncation occurred.
+ */
+size_t
+strlcpy(char *dst, const char *src, size_t dsize)
+{
+	const char *osrc = src;
+	size_t nleft = dsize;
+
+	/* Copy as many bytes as will fit. */
+	if (nleft != 0) {
+		while (--nleft != 0) {
+			if ((*dst++ = *src++) == '\0')
+				break;
+		}
+	}
+
+	/* Not enough room in dst, add NUL and traverse rest of src. */
+	if (nleft == 0) {
+		if (dsize != 0)
+			*dst = '\0';		/* NUL-terminate dst */
+		while (*src++)
+			;
+	}
+
+	return(src - osrc - 1);	/* count does not include NUL */
+}
--- a/miltertest/miltertest.c
+++ b/miltertest/miltertest.c
@@ -42,6 +42,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/opendkim/Makefile.am
+++ b/opendkim/Makefile.am
@@ -23,6 +23,9 @@ dist_doc_DATA = opendkim.conf.sample ope
 if BUILD_FILTER
 sbin_PROGRAMS += opendkim
 opendkim_SOURCES = opendkim.c opendkim.h opendkim-ar.c opendkim-ar.h opendkim-arf.c opendkim-arf.h opendkim-config.h opendkim-crypto.c opendkim-crypto.h opendkim-db.c opendkim-db.h opendkim-dns.c opendkim-dns.h opendkim-lua.c opendkim-lua.h config.c config.h flowrate.c flowrate.h reputation.c reputation.h stats.c stats.h test.c test.h util.c util.h
+if USE_BUNDLED_STRL
+opendkim_SOURCES += ../linux_string/linux_string.h ../linux_string/strlcpy.c ../linux_string/strlcat.c
+endif
 opendkim_CC = $(PTHREAD_CC)
 opendkim_CFLAGS = $(PTHREAD_CFLAGS) $(LIBCRYPTO_CFLAGS) $(COV_CFLAGS)
 opendkim_CPPFLAGS = -I$(srcdir)/../libopendkim $(LIBCRYPTO_CPPFLAGS)
@@ -103,6 +106,9 @@ endif
 
 opendkim_testkey_CC = $(PTHREAD_CC)
 opendkim_testkey_SOURCES = config.c config.h opendkim-crypto.c opendkim-crypto.h opendkim-db.c opendkim-db.h opendkim-dns.c opendkim-dns.h opendkim-lua.c opendkim-lua.h opendkim-testkey.c util.c util.h $(srcdir)/../libopendkim/dkim.h $(srcdir)/../libopendkim/dkim-test.h
+if USE_BUNDLED_STRL
+opendkim_testkey_SOURCES += ../linux_string/linux_string.h ../linux_string/strlcpy.c ../linux_string/strlcat.c
+endif
 opendkim_testkey_CPPFLAGS = -I$(srcdir)/../libopendkim $(LIBCRYPTO_CPPFLAGS)
 opendkim_testkey_CFLAGS = $(LIBCRYPTO_CFLAGS) $(COV_CFLAGS) $(PTHREAD_CFLAGS)
 opendkim_testkey_LDFLAGS = $(LIBCRYPTO_LIBDIRS) $(COV_LDFLAGS) $(PTHREAD_CFLAGS)
@@ -172,6 +178,9 @@ opendkim_testmsg_LDADD = ../libopendkim/
 
 opendkim_genzone_CC = $(PTHREAD_CC)
 opendkim_genzone_SOURCES = config.c config.h opendkim-db.c opendkim-db.h opendkim-genzone.c opendkim-lua.c util.c util.h
+if USE_BUNDLED_STRL
+opendkim_genzone_SOURCES += ../linux_string/linux_string.h ../linux_string/strlcpy.c ../linux_string/strlcat.c
+endif
 opendkim_genzone_CPPFLAGS = -I$(srcdir)/../libopendkim $(LIBCRYPTO_CPPFLAGS)
 opendkim_genzone_CFLAGS = $(PTHREAD_CFLAGS) $(LIBCRYPTO_CFLAGS) $(COV_CFLAGS)
 opendkim_genzone_LDFLAGS = $(COV_LDFLAGS) $(LIBCRYPTO_LIBDIRS) $(PTHREAD_CFLAGS)
@@ -222,6 +231,9 @@ endif
 if ATPS
 opendkim_atpszone_CC = $(PTHREAD_CC)
 opendkim_atpszone_SOURCES = config.c config.h opendkim-db.c opendkim-db.h opendkim-atpszone.c opendkim-lua.c util.c util.h
+if USE_BUNDLED_STRL
+opendkim_atpszone_SOURCES += ../linux_string/linux_string.h ../linux_string/strlcpy.c ../linux_string/strlcat.c
+endif
 opendkim_atpszone_CPPFLAGS = -I$(srcdir)/../libopendkim $(LIBCRYPTO_CPPFLAGS)
 opendkim_atpszone_CFLAGS = $(COV_CFLAGS) $(LIBCRYPTO_CFLAGS) $(PTHREAD_CFLAGS)
 opendkim_atpszone_LDFLAGS = $(COV_LDFLAGS) $(LIBCRYPTO_LIBDIRS) $(PTHREAD_CFLAGS)
--- a/opendkim/config.c
+++ b/opendkim/config.c
@@ -27,6 +27,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/opendkim/flowrate.c
+++ b/opendkim/flowrate.c
@@ -21,6 +21,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/opendkim/opendkim-ar.c
+++ b/opendkim/opendkim-ar.c
@@ -26,6 +26,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/opendkim/opendkim-db.c
+++ b/opendkim/opendkim-db.c
@@ -41,6 +41,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/opendkim/opendkim-spam.c
+++ b/opendkim/opendkim-spam.c
@@ -30,6 +30,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/opendkim/opendkim-testkey.c
+++ b/opendkim/opendkim-testkey.c
@@ -41,6 +41,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/opendkim/opendkim.c
+++ b/opendkim/opendkim.c
@@ -97,6 +97,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/opendkim/reputation.c
+++ b/opendkim/reputation.c
@@ -26,6 +26,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/opendkim/stats.c
+++ b/opendkim/stats.c
@@ -45,6 +45,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/opendkim/test.c
+++ b/opendkim/test.c
@@ -26,6 +26,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/opendkim/util.c
+++ b/opendkim/util.c
@@ -51,6 +51,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/stats/opendkim-importstats.c
+++ b/stats/opendkim-importstats.c
@@ -28,6 +28,11 @@
 # include <bsd/string.h>
 #endif /* USE_BSD_H */
 
+/* if you do not want to use strl* functions */
+#ifdef USE_BUNDLED_STRL
+# include "linux_string/linux_string.h"
+#endif /* USE_BUNDLED_STRL */
+
 /* libstrl if needed */
 #ifdef USE_STRL_H
 # include <strl.h>
--- a/configure.ac
+++ b/configure.ac
@@ -39,7 +39,7 @@ AM_INIT_AUTOMAKE(
   dnl Automake version before 1.13 (when the serial-tests option was
   dnl still the default) still defined the badly obsolete macro
   dnl 'AM_PROG_INSTALL'.
-  m4_ifndef([AM_PROG_INSTALL], [serial-tests])
+  m4_ifndef([AM_PROG_INSTALL], [serial-tests], [subdir-objects])
 )
 AC_CONFIG_HEADERS([build-config.h])
 
@@ -189,11 +189,22 @@ AC_TYPE_UINT64_T
 # Checks for library functions.
 #
 AC_FUNC_FORK
-AC_FUNC_GETGROUPS
 AC_FUNC_MALLOC
 AC_FUNC_MKTIME
 AC_FUNC_REALLOC
 
+AH_TEMPLATE([USE_BUNDLED_STRL],
+    [Define to 1 if you want to use strn* string functions instead of strl* functions.])
+AC_ARG_ENABLE([bundled-strl], AS_HELP_STRING([--enable-bundled-strl], [Use bundled strl* functions]))
+
+if test "x$enable_bundled_strl" == "xyes"
+then
+	AC_DEFINE([USE_BUNDLED_STRL], 1,
+			[Define to 1 if you want to use strn* string functions instead of strl* functions.])
+fi
+ 
+AM_CONDITIONAL([USE_BUNDLED_STRL], [test x"$enable_bundled_strl" = x"yes"])
+
 AC_CHECK_FUNCS([dup2 endpwent getcwd gethostname gethostbyname getaddrinfo gethostbyname2 gettimeofday isascii memchr memmove memset regcomp select socket strcasecmp strchr strdup strerror strncasecmp strrchr strstr strtol strtoul strtoull realpath strsep])
 
 bsdstrl_h_found="no"
@@ -227,7 +238,7 @@ fi
 # we need something above to have worked
 if test x"$strl_found" != x"yes" -a x"$libstrl_found" != x"yes"
 then
-	AC_MSG_ERROR(no strlcpy/strlcat found)
+	AC_MSG_WARN(no strlcpy/strlcat found)
 fi
 
 AC_CHECK_HEADERS([strl.h], [strl_h_found="yes"])
