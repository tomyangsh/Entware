--- a/modules/pam_limits/pam_limits.c
+++ b/modules/pam_limits/pam_limits.c
@@ -47,6 +47,10 @@
 #include <libaudit.h>
 #endif
 
+#ifndef LINUX_VERSION_CODE
+#include <linux/version.h>
+#endif
+
 /* Module defines */
 #define LINE_LENGTH 1024
 
@@ -89,7 +93,9 @@ struct pam_limit_s {
     int flag_numsyslogins; /* whether to limit logins only for a
 			      specific user or to count all logins */
     int priority;	 /* the priority to run user process with */
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,0) /* PR_SET_NO_NEW_PRIVS since Linux 3.5 */
     int nonewprivs;	/* whether to prctl(PR_SET_NO_NEW_PRIVS) */
+#endif /* PR_SET_NO_NEW_PRIVS since Linux 3.5 */
     struct user_limits_struct limits[RLIM_NLIMITS];
     const char *conf_file;
     int utmp_after_pam_call;
@@ -589,8 +595,10 @@ process_limit (const pam_handle_t *pamh,
 	pl->flag_numsyslogins = 1;
     } else if (strcmp(lim_item, "priority") == 0) {
 	limit_item = LIMIT_PRI;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,0)
     } else if (strcmp(lim_item, "nonewprivs") == 0) {
 	limit_item = LIMIT_NONEWPRIVS;
+#endif
     } else {
         pam_syslog(pamh, LOG_DEBUG, "unknown limit item '%s'", lim_item);
         return;
@@ -742,8 +750,10 @@ process_limit (const pam_handle_t *pamh,
 
 	if (limit_item == LIMIT_PRI) {
 	    pl->priority = int_value;
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,0)
 	} else if (limit_item == LIMIT_NONEWPRIVS) {
 	    pl->nonewprivs = int_value;
+#endif
 	} else {
 	    if (pl->login_limit_def < source) {
 		return;
@@ -1064,12 +1074,14 @@ static int setup_limits(pam_handle_t *pa
         retval |= LOGIN_ERR;
     }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,0)
     if (pl->nonewprivs) {
 	if (prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0) < 0) {
 	    pam_syslog(pamh, LOG_ERR, "Could not set prctl(PR_SET_NO_NEW_PRIVS): %m");
 	    retval |= LIMIT_ERR;
 	}
     }
+#endif
 
     return retval;
 }
--- a/modules/pam_setquota/pam_setquota.c
+++ b/modules/pam_setquota/pam_setquota.c
@@ -9,7 +9,9 @@
 */
 
 #include <sys/types.h>
+#if defined __GLIBC__ && __GLIBC_MINOR__ > 23
 #include <sys/quota.h>
+#endif
 #include <linux/quota.h>
 #include <pwd.h>
 #include <syslog.h>
